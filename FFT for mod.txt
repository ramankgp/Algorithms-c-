#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
typedef long long ll;
typedef long double ld;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mod 1000000007
#define inf 1000000000000000
#define autoit(x,it) for(auto it = x.begin(); it != x.end(); it++)
#define rep(n) for(ll i = 0; i < n; i++)
#define repi(i,n) for(ll i = 0; i < n; i++)

#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 

#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 

using namespace std;

typedef complex<double> base;
const double PI = 4*atan(1);

vector<base> omega;

ll FFT_N;
void init_fft(ll n) {
    FFT_N  = n;
    omega.resize(n);
    double angle = 2 * PI / n;
    for(int i = 0; i < n; i++)
        omega[i] = base( cosl(i * angle), sinl(i * angle));
}
void fft (vector<base> & a) {
    ll n = (ll) a.size();
    if (n == 1)  return;
    ll half = n >> 1;
    vector<base> even (half),  odd (half);
    for (int i=0, j=0; i<n; i+=2, ++j) {
        even[j] = a[i];
        odd[j] = a[i+1];
    }
    fft (even), fft (odd);
    for (int i=0, denom = FFT_N/n; i < half; ++i) {
        base temp =  odd[i] * omega[i * denom] ;
        a[i] =  even[i] + temp;
        a[i+half] = even[i] - temp;
    }
}
void multiply (const vector<ll> & a, const vector<ll> & b, vector<ll> & res) {
    vector<base> fa (a.begin(), a.end()),  fb (b.begin(), b.end());
    ll n = 1;
    while (n < 2*max (a.size(), b.size()))  n <<= 1;
    fa.resize (n),  fb.resize (n);
    init_fft(n);
    fft (fa),  fft (fb);
    for (ll i=0; i<n; ++i)
        fa[i] = conj( fa[i] * fb[i]);
    fft (fa);
    res.resize (n);
    for (ll i=0; i<n; ++i) {
        res[i] = (ll) (fa[i].real() / n + 0.5);
        res[i]%=mod;
    }
}