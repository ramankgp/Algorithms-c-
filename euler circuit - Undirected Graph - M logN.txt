#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
typedef long long ll;
typedef long double ld;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mod 1000000007
#define inf 1000000000000000000
#define bpc(x) __builtin_popcountll(x)
#define autoit(x,it) for(auto it = x.begin(); it != x.end(); it++)
#define rep(n) for(ll i = 0; i < n; i++)
#define repi(i,n) for(ll i = 0; i < n; i++)

#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 

#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 

using namespace std;

void dfs(ll curr, set<ll> v[], bool vis[])
{
    vis[curr] = 1;
    autoit(v[curr],it)
    {
        if(vis[*it])
            continue;
        dfs(*it,v,vis);    
    }
}

bool isConnected(set<ll> v[], ll n)
{
    bool vis[n];
    memset(vis,0,sizeof(vis));
    ll cnt = 0;
    rep(n)
    {
        if(v[i].size() == 0)
            continue;
        if(!vis[i])
        {
            dfs(i,v,vis);
            cnt++;
        }
    }
    if(cnt>1)
        return 0;
    return 1;    
}

bool euler(set<ll> v[], ll n, vector<ll> &path)
{
    bool pos = 1;
    rep(n)
    {
        if(v[i].size()%2 == 1)
            return 0;
    }
    
    if(!isConnected(v,n))
        return 0;
    
    ll curr = -1;
    rep(n)
    {
        if(v[i].size() > 0)
        {
            curr = i;
            break;
        }
    }
    
    stack<ll> st;
    st.push(curr);
    
    while(st.size()>0)
    {
        auto curr = st.top();
        if(v[curr].size() == 0)
        {
            path.pb(curr);
            st.pop();
        }
        
        else
        {
            auto it = *v[curr].begin();
            v[curr].erase(v[curr].begin());
            v[it].erase(curr);
            st.push(it);
        }
    }
    
    return 1;
    
}

int main()
{
  FAST/**/
   
   
   
   return 0;        
}  
  
          
   