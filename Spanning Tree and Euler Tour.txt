#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
typedef long long ll;
typedef long double ld;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mod 1000000007
#define inf 1000000000000000
#define bpc(x) __builtin_parityll(x)
#define autoit(x,it) for(auto it = x.begin(); it != x.end(); it++)
#define rep(n) for(ll i = 0; i < n; i++)
#define repi(i,n) for(ll i = 0; i < n; i++)
 
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
 
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 
 
using namespace std;
ll par[200005];
void getspan(ll curr, vector<ll> gr[], vector<ll> v[], bool vis[])
{
    vis[curr] = 1;
    autoit(gr[curr],it)
    {
        if(vis[*it])
            continue;
        getspan(*it,gr,v,vis);
        v[curr].pb(*it);
        par[*it] = curr;
    }
}
 
void euler(ll curr, vector<ll> v[],vector<ll> &tour)
{
    tour.pb(curr);
    autoit(v[curr],it)
    {
        if(*it == par[curr])
            continue;
        euler(*it,v,tour);
        tour.pb(curr);
    }
}
 
int main()
{
   FAST/**/
   
   ll n,m,k;
   cin>>n>>m>>k;
   
   vector<ll> gr[n];
   rep(m)
   {
       ll a,b;
       cin>>a>>b;
       a--,b--;
       gr[a].pb(b);
       gr[b].pb(a);
   }
   bool vis[n];
   memset(vis,0,sizeof(vis));
   
   vector<ll> v[n];
   getspan(0,gr,v,vis);
   
   par[0] = -1;
   vector<ll> tour;
   
   euler(0,v,tour);
   
   return 0;        
}  
   